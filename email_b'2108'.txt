Good morning! Here's your coding interview problem for today.

This problem was asked by Google.

You are given an N by N matrix of random letters and a dictionary of words. Find
the maximum number of words that can be packed on the board from the given
dictionary.

A word is considered to be able to be packed on the board if:

 * It can be found in the dictionary
 * It can be constructed from untaken letters by other words found so far on the
   board
 * The letters are adjacent to each other (vertically and horizontally, not
   diagonally).

Each tile can be visited only once by any word.

For example, given the following dictionary:

{ 'eat', 'rain', 'in', 'rat' }


and matrix:

[['e', 'a', 'n'],
 ['t', 't', 'i'],
 ['a', 'r', 'a']]


Your function should return 3, since we can make the words 'eat', 'in', and
'rat' without them touching each other. We could have alternatively made 'eat'
and 'rain', but that would be incorrect since that's only 2 words.


--------------------------------------------------------------------------------

Upgrade to premium
[https://www.dailycodingproblem.com/subscribe?email=mishravishal958%40gmail.com&ref=csdojo] 
and get in-depth solutions to every problem, including this one. Since you were
referred by one of our affiliates, you'll get a 10% discount on checkout!

If you liked this problem, feel free to forward it along so they can subscribe
here [https://www.dailycodingproblem.com/]! As always, shoot us an email if
there's anything we can help with!


--------------------------------------------------------------------------------

Master algorithms together on Binary Search [https://binarysearch.io/?ref=dcp].
Create a room, invite your friends, and race to finish the problem!


--------------------------------------------------------------------------------

No more? Snooze or unsubscribe
[https://dailycodingproblem.com/unsubscribe?unsubscribeKey=c5ae6a38585c7eaa09f0d49f11f3d7c2f718630c5141670a65cddcd4a35cc0a5e9a43881]
.