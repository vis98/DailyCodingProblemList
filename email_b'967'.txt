Good morning! Here's your coding interview problem for today.

This problem was asked by Google.

You are writing an AI for a 2D map game. You are somewhere in a 2D grid, and
there are coins strewn about over the map.

Given the position of all the coins and your current position, find the closest
coin to you in terms of Manhattan distance. That is, you can move around up,
down, left, and right, but not diagonally. If there are multiple possible
closest coins, return any of them.

For example, given the following map, where you are x, coins are o, and empty
spaces are . (top left is 0, 0):

---------------------
| . | . | x | . | o |
---------------------
| o | . | . | . | . |
---------------------
| o | . | . | . | o |
---------------------
| . | . | o | . | . |
---------------------


return (0, 4), since that coin is closest. This map would be represented in our
question as:

Our position: (0, 2)
Coins: [(0, 4), (1, 0), (2, 0), (3, 2)]



--------------------------------------------------------------------------------

Upgrade to premium
[https://www.dailycodingproblem.com/subscribe?email=mishravishal958%40gmail.com&ref=csdojo] 
and get in-depth solutions to every problem, including this one. Since you were
referred by one of our affiliates, you'll get a 10% discount on checkout!

If you liked this problem, feel free to forward it along so they can subscribe
here [https://www.dailycodingproblem.com/]! As always, shoot us an email if
there's anything we can help with!


--------------------------------------------------------------------------------

Looking to switch to Product Management? Check out Daily Product Prep
[https://dailyproductprep.com/?ref=dcp] for product interview problems every
day!


--------------------------------------------------------------------------------

No more? Snooze or unsubscribe
[https://dailycodingproblem.com/unsubscribe?unsubscribeKey=c5ae6a38585c7eaa09f0d49f11f3d7c2f718630c5141670a65cddcd4a35cc0a5e9a43881]
.